// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetArticles request
	GetArticles(ctx context.Context, params *GetArticlesParams) (*http.Response, error)

	// CreateArticle request  with any body
	CreateArticleWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateArticle(ctx context.Context, body CreateArticleJSONRequestBody) (*http.Response, error)

	// GetUserArticles request
	GetUserArticles(ctx context.Context, params *GetUserArticlesParams) (*http.Response, error)

	// GetUserAllArticles request
	GetUserAllArticles(ctx context.Context, params *GetUserAllArticlesParams) (*http.Response, error)

	// GetUserPublishedArticles request
	GetUserPublishedArticles(ctx context.Context, params *GetUserPublishedArticlesParams) (*http.Response, error)

	// GetUserUnpublishedArticles request
	GetUserUnpublishedArticles(ctx context.Context, params *GetUserUnpublishedArticlesParams) (*http.Response, error)

	// GetArticleById request
	GetArticleById(ctx context.Context, id int32) (*http.Response, error)

	// UpdateArticle request  with any body
	UpdateArticleWithBody(ctx context.Context, id int32, contentType string, body io.Reader) (*http.Response, error)

	UpdateArticle(ctx context.Context, id int32, body UpdateArticleJSONRequestBody) (*http.Response, error)

	// GetCommentsByArticleId request
	GetCommentsByArticleId(ctx context.Context, params *GetCommentsByArticleIdParams) (*http.Response, error)

	// GetCommentById request
	GetCommentById(ctx context.Context, id string) (*http.Response, error)

	// GetFollowers request
	GetFollowers(ctx context.Context, params *GetFollowersParams) (*http.Response, error)

	// GetListings request
	GetListings(ctx context.Context, params *GetListingsParams) (*http.Response, error)

	// CreateListing request  with any body
	CreateListingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateListing(ctx context.Context, body CreateListingJSONRequestBody) (*http.Response, error)

	// GetListingsByCategory request
	GetListingsByCategory(ctx context.Context, category ListingCategory, params *GetListingsByCategoryParams) (*http.Response, error)

	// GetListingById request
	GetListingById(ctx context.Context, id int64) (*http.Response, error)

	// UpdateListing request  with any body
	UpdateListingWithBody(ctx context.Context, id int64, contentType string, body io.Reader) (*http.Response, error)

	UpdateListing(ctx context.Context, id int64, body UpdateListingJSONRequestBody) (*http.Response, error)

	// GetPodcastEpisodes request
	GetPodcastEpisodes(ctx context.Context, params *GetPodcastEpisodesParams) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, params *GetTagsParams) (*http.Response, error)

	// GetUserMe request
	GetUserMe(ctx context.Context) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, id string, params *GetUserParams) (*http.Response, error)

	// GetArticlesWithVideo request
	GetArticlesWithVideo(ctx context.Context, params *GetArticlesWithVideoParams) (*http.Response, error)

	// GetWebhooks request
	GetWebhooks(ctx context.Context) (*http.Response, error)

	// CreateWebhook request  with any body
	CreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateWebhook(ctx context.Context, body CreateWebhookJSONRequestBody) (*http.Response, error)

	// DeleteWebhook request
	DeleteWebhook(ctx context.Context, id int64) (*http.Response, error)

	// GetWebhookById request
	GetWebhookById(ctx context.Context, id int64) (*http.Response, error)
}

func (c *Client) GetArticles(ctx context.Context, params *GetArticlesParams) (*http.Response, error) {
	req, err := NewGetArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArticleWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateArticleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArticle(ctx context.Context, body CreateArticleJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateArticleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserArticles(ctx context.Context, params *GetUserArticlesParams) (*http.Response, error) {
	req, err := NewGetUserArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAllArticles(ctx context.Context, params *GetUserAllArticlesParams) (*http.Response, error) {
	req, err := NewGetUserAllArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPublishedArticles(ctx context.Context, params *GetUserPublishedArticlesParams) (*http.Response, error) {
	req, err := NewGetUserPublishedArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUnpublishedArticles(ctx context.Context, params *GetUserUnpublishedArticlesParams) (*http.Response, error) {
	req, err := NewGetUserUnpublishedArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetArticleById(ctx context.Context, id int32) (*http.Response, error) {
	req, err := NewGetArticleByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArticleWithBody(ctx context.Context, id int32, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateArticleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArticle(ctx context.Context, id int32, body UpdateArticleJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateArticleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommentsByArticleId(ctx context.Context, params *GetCommentsByArticleIdParams) (*http.Response, error) {
	req, err := NewGetCommentsByArticleIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommentById(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetCommentByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetFollowers(ctx context.Context, params *GetFollowersParams) (*http.Response, error) {
	req, err := NewGetFollowersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetListings(ctx context.Context, params *GetListingsParams) (*http.Response, error) {
	req, err := NewGetListingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateListingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateListingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateListing(ctx context.Context, body CreateListingJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateListingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingsByCategory(ctx context.Context, category ListingCategory, params *GetListingsByCategoryParams) (*http.Response, error) {
	req, err := NewGetListingsByCategoryRequest(c.Server, category, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetListingById(ctx context.Context, id int64) (*http.Response, error) {
	req, err := NewGetListingByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListingWithBody(ctx context.Context, id int64, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateListingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListing(ctx context.Context, id int64, body UpdateListingJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateListingRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPodcastEpisodes(ctx context.Context, params *GetPodcastEpisodesParams) (*http.Response, error) {
	req, err := NewGetPodcastEpisodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, params *GetTagsParams) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserMe(ctx context.Context) (*http.Response, error) {
	req, err := NewGetUserMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, id string, params *GetUserParams) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetArticlesWithVideo(ctx context.Context, params *GetArticlesWithVideoParams) (*http.Response, error) {
	req, err := NewGetArticlesWithVideoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhooks(ctx context.Context) (*http.Response, error) {
	req, err := NewGetWebhooksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhook(ctx context.Context, body CreateWebhookJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebhook(ctx context.Context, id int64) (*http.Response, error) {
	req, err := NewDeleteWebhookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhookById(ctx context.Context, id int64) (*http.Response, error) {
	req, err := NewGetWebhookByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetArticlesRequest generates requests for GetArticles
func NewGetArticlesRequest(server string, params *GetArticlesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/articles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tag", *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Username != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "username", *params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "state", *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Top != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "top", *params.Top); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CollectionId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "collection_id", *params.CollectionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateArticleRequest calls the generic CreateArticle builder with application/json body
func NewCreateArticleRequest(server string, body CreateArticleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateArticleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateArticleRequestWithBody generates requests for CreateArticle with any type of body
func NewCreateArticleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/articles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetUserArticlesRequest generates requests for GetUserArticles
func NewGetUserArticlesRequest(server string, params *GetUserArticlesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/articles/me")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserAllArticlesRequest generates requests for GetUserAllArticles
func NewGetUserAllArticlesRequest(server string, params *GetUserAllArticlesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/articles/me/all")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserPublishedArticlesRequest generates requests for GetUserPublishedArticles
func NewGetUserPublishedArticlesRequest(server string, params *GetUserPublishedArticlesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/articles/me/published")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserUnpublishedArticlesRequest generates requests for GetUserUnpublishedArticles
func NewGetUserUnpublishedArticlesRequest(server string, params *GetUserUnpublishedArticlesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/articles/me/unpublished")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArticleByIdRequest generates requests for GetArticleById
func NewGetArticleByIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/articles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateArticleRequest calls the generic UpdateArticle builder with application/json body
func NewUpdateArticleRequest(server string, id int32, body UpdateArticleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateArticleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateArticleRequestWithBody generates requests for UpdateArticle with any type of body
func NewUpdateArticleRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/articles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCommentsByArticleIdRequest generates requests for GetCommentsByArticleId
func NewGetCommentsByArticleIdRequest(server string, params *GetCommentsByArticleIdParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/comments")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.AId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "a_id", *params.AId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommentByIdRequest generates requests for GetCommentById
func NewGetCommentByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/comments/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFollowersRequest generates requests for GetFollowers
func NewGetFollowersRequest(server string, params *GetFollowersParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/followers/users")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingsRequest generates requests for GetListings
func NewGetListingsRequest(server string, params *GetListingsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/listings")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "category", *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateListingRequest calls the generic CreateListing builder with application/json body
func NewCreateListingRequest(server string, body CreateListingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateListingRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateListingRequestWithBody generates requests for CreateListing with any type of body
func NewCreateListingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/listings")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetListingsByCategoryRequest generates requests for GetListingsByCategory
func NewGetListingsByCategoryRequest(server string, category ListingCategory, params *GetListingsByCategoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "category", category)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/listings/category/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListingByIdRequest generates requests for GetListingById
func NewGetListingByIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/listings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateListingRequest calls the generic UpdateListing builder with application/json body
func NewUpdateListingRequest(server string, id int64, body UpdateListingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateListingRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateListingRequestWithBody generates requests for UpdateListing with any type of body
func NewUpdateListingRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/listings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPodcastEpisodesRequest generates requests for GetPodcastEpisodes
func NewGetPodcastEpisodesRequest(server string, params *GetPodcastEpisodesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/podcast_episodes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Username != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "username", *params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string, params *GetTagsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/tags")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserMeRequest generates requests for GetUserMe
func NewGetUserMeRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, id string, params *GetUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Url != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "url", *params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArticlesWithVideoRequest generates requests for GetArticlesWithVideo
func NewGetArticlesWithVideoRequest(server string, params *GetArticlesWithVideoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/videos")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhooksRequest generates requests for GetWebhooks
func NewGetWebhooksRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWebhookRequest calls the generic CreateWebhook builder with application/json body
func NewCreateWebhookRequest(server string, body CreateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWebhookRequestWithBody generates requests for CreateWebhook with any type of body
func NewCreateWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteWebhookRequest generates requests for DeleteWebhook
func NewDeleteWebhookRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhookByIdRequest generates requests for GetWebhookById
func NewGetWebhookByIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetArticles request
	GetArticlesWithResponse(ctx context.Context, params *GetArticlesParams) (*GetArticlesResponse, error)

	// CreateArticle request  with any body
	CreateArticleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateArticleResponse, error)

	CreateArticleWithResponse(ctx context.Context, body CreateArticleJSONRequestBody) (*CreateArticleResponse, error)

	// GetUserArticles request
	GetUserArticlesWithResponse(ctx context.Context, params *GetUserArticlesParams) (*GetUserArticlesResponse, error)

	// GetUserAllArticles request
	GetUserAllArticlesWithResponse(ctx context.Context, params *GetUserAllArticlesParams) (*GetUserAllArticlesResponse, error)

	// GetUserPublishedArticles request
	GetUserPublishedArticlesWithResponse(ctx context.Context, params *GetUserPublishedArticlesParams) (*GetUserPublishedArticlesResponse, error)

	// GetUserUnpublishedArticles request
	GetUserUnpublishedArticlesWithResponse(ctx context.Context, params *GetUserUnpublishedArticlesParams) (*GetUserUnpublishedArticlesResponse, error)

	// GetArticleById request
	GetArticleByIdWithResponse(ctx context.Context, id int32) (*GetArticleByIdResponse, error)

	// UpdateArticle request  with any body
	UpdateArticleWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader) (*UpdateArticleResponse, error)

	UpdateArticleWithResponse(ctx context.Context, id int32, body UpdateArticleJSONRequestBody) (*UpdateArticleResponse, error)

	// GetCommentsByArticleId request
	GetCommentsByArticleIdWithResponse(ctx context.Context, params *GetCommentsByArticleIdParams) (*GetCommentsByArticleIdResponse, error)

	// GetCommentById request
	GetCommentByIdWithResponse(ctx context.Context, id string) (*GetCommentByIdResponse, error)

	// GetFollowers request
	GetFollowersWithResponse(ctx context.Context, params *GetFollowersParams) (*GetFollowersResponse, error)

	// GetListings request
	GetListingsWithResponse(ctx context.Context, params *GetListingsParams) (*GetListingsResponse, error)

	// CreateListing request  with any body
	CreateListingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateListingResponse, error)

	CreateListingWithResponse(ctx context.Context, body CreateListingJSONRequestBody) (*CreateListingResponse, error)

	// GetListingsByCategory request
	GetListingsByCategoryWithResponse(ctx context.Context, category ListingCategory, params *GetListingsByCategoryParams) (*GetListingsByCategoryResponse, error)

	// GetListingById request
	GetListingByIdWithResponse(ctx context.Context, id int64) (*GetListingByIdResponse, error)

	// UpdateListing request  with any body
	UpdateListingWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader) (*UpdateListingResponse, error)

	UpdateListingWithResponse(ctx context.Context, id int64, body UpdateListingJSONRequestBody) (*UpdateListingResponse, error)

	// GetPodcastEpisodes request
	GetPodcastEpisodesWithResponse(ctx context.Context, params *GetPodcastEpisodesParams) (*GetPodcastEpisodesResponse, error)

	// GetTags request
	GetTagsWithResponse(ctx context.Context, params *GetTagsParams) (*GetTagsResponse, error)

	// GetUserMe request
	GetUserMeWithResponse(ctx context.Context) (*GetUserMeResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, id string, params *GetUserParams) (*GetUserResponse, error)

	// GetArticlesWithVideo request
	GetArticlesWithVideoWithResponse(ctx context.Context, params *GetArticlesWithVideoParams) (*GetArticlesWithVideoResponse, error)

	// GetWebhooks request
	GetWebhooksWithResponse(ctx context.Context) (*GetWebhooksResponse, error)

	// CreateWebhook request  with any body
	CreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateWebhookResponse, error)

	CreateWebhookWithResponse(ctx context.Context, body CreateWebhookJSONRequestBody) (*CreateWebhookResponse, error)

	// DeleteWebhook request
	DeleteWebhookWithResponse(ctx context.Context, id int64) (*DeleteWebhookResponse, error)

	// GetWebhookById request
	GetWebhookByIdWithResponse(ctx context.Context, id int64) (*GetWebhookByIdResponse, error)
}

type GetArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleIndex
}

// Status returns HTTPResponse.Status
func (r GetArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateArticleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ArticleShow
	JSON400      *APIError
	JSON401      *APIError
	JSON422      *APIError
	JSON429      *APIError
}

// Status returns HTTPResponse.Status
func (r CreateArticleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateArticleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleMe
	JSON401      *APIError
}

// Status returns HTTPResponse.Status
func (r GetUserArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAllArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleMe
	JSON401      *APIError
}

// Status returns HTTPResponse.Status
func (r GetUserAllArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAllArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPublishedArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleMe
	JSON401      *APIError
}

// Status returns HTTPResponse.Status
func (r GetUserPublishedArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPublishedArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserUnpublishedArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleMe
	JSON401      *APIError
}

// Status returns HTTPResponse.Status
func (r GetUserUnpublishedArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUnpublishedArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArticleByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArticleShow
	JSON404      *APIError
}

// Status returns HTTPResponse.Status
func (r GetArticleByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticleByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateArticleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArticleShow
	JSON400      *APIError
	JSON401      *APIError
	JSON422      *APIError
	JSON429      *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateArticleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateArticleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommentsByArticleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Comment
	JSON404      *APIError
}

// Status returns HTTPResponse.Status
func (r GetCommentsByArticleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommentsByArticleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommentByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Comment
	JSON404      *APIError
}

// Status returns HTTPResponse.Status
func (r GetCommentByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommentByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Follower
	JSON401      *APIError
}

// Status returns HTTPResponse.Status
func (r GetFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Listing
}

// Status returns HTTPResponse.Status
func (r GetListingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateListingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Listing
	JSON400      *APIError
	JSON401      *APIError
	JSON402      *APIError
	JSON422      *APIError
}

// Status returns HTTPResponse.Status
func (r CreateListingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateListingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingsByCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Listing
}

// Status returns HTTPResponse.Status
func (r GetListingsByCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingsByCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListingByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Listing
	JSON404      *APIError
}

// Status returns HTTPResponse.Status
func (r GetListingByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateListingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArticleShow
	JSON400      *APIError
	JSON401      *APIError
	JSON402      *APIError
	JSON422      *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateListingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateListingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPodcastEpisodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PodcastEpisode
	JSON404      *APIError
}

// Status returns HTTPResponse.Status
func (r GetPodcastEpisodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPodcastEpisodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Tag
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON401      *APIError
}

// Status returns HTTPResponse.Status
func (r GetUserMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON404      *APIError
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArticlesWithVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleVideo
}

// Status returns HTTPResponse.Status
func (r GetArticlesWithVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticlesWithVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WebhookIndex
	JSON401      *APIError
}

// Status returns HTTPResponse.Status
func (r GetWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebhookShow
	JSON400      *APIError
	JSON401      *APIError
	JSON422      *APIError
}

// Status returns HTTPResponse.Status
func (r CreateWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *APIError
	JSON404      *APIError
}

// Status returns HTTPResponse.Status
func (r DeleteWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookShow
	JSON401      *APIError
	JSON404      *APIError
}

// Status returns HTTPResponse.Status
func (r GetWebhookByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetArticlesWithResponse request returning *GetArticlesResponse
func (c *ClientWithResponses) GetArticlesWithResponse(ctx context.Context, params *GetArticlesParams) (*GetArticlesResponse, error) {
	rsp, err := c.GetArticles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetArticlesResponse(rsp)
}

// CreateArticleWithBodyWithResponse request with arbitrary body returning *CreateArticleResponse
func (c *ClientWithResponses) CreateArticleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateArticleResponse, error) {
	rsp, err := c.CreateArticleWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateArticleResponse(rsp)
}

func (c *ClientWithResponses) CreateArticleWithResponse(ctx context.Context, body CreateArticleJSONRequestBody) (*CreateArticleResponse, error) {
	rsp, err := c.CreateArticle(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateArticleResponse(rsp)
}

// GetUserArticlesWithResponse request returning *GetUserArticlesResponse
func (c *ClientWithResponses) GetUserArticlesWithResponse(ctx context.Context, params *GetUserArticlesParams) (*GetUserArticlesResponse, error) {
	rsp, err := c.GetUserArticles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUserArticlesResponse(rsp)
}

// GetUserAllArticlesWithResponse request returning *GetUserAllArticlesResponse
func (c *ClientWithResponses) GetUserAllArticlesWithResponse(ctx context.Context, params *GetUserAllArticlesParams) (*GetUserAllArticlesResponse, error) {
	rsp, err := c.GetUserAllArticles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAllArticlesResponse(rsp)
}

// GetUserPublishedArticlesWithResponse request returning *GetUserPublishedArticlesResponse
func (c *ClientWithResponses) GetUserPublishedArticlesWithResponse(ctx context.Context, params *GetUserPublishedArticlesParams) (*GetUserPublishedArticlesResponse, error) {
	rsp, err := c.GetUserPublishedArticles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPublishedArticlesResponse(rsp)
}

// GetUserUnpublishedArticlesWithResponse request returning *GetUserUnpublishedArticlesResponse
func (c *ClientWithResponses) GetUserUnpublishedArticlesWithResponse(ctx context.Context, params *GetUserUnpublishedArticlesParams) (*GetUserUnpublishedArticlesResponse, error) {
	rsp, err := c.GetUserUnpublishedArticles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUnpublishedArticlesResponse(rsp)
}

// GetArticleByIdWithResponse request returning *GetArticleByIdResponse
func (c *ClientWithResponses) GetArticleByIdWithResponse(ctx context.Context, id int32) (*GetArticleByIdResponse, error) {
	rsp, err := c.GetArticleById(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetArticleByIdResponse(rsp)
}

// UpdateArticleWithBodyWithResponse request with arbitrary body returning *UpdateArticleResponse
func (c *ClientWithResponses) UpdateArticleWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader) (*UpdateArticleResponse, error) {
	rsp, err := c.UpdateArticleWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArticleResponse(rsp)
}

func (c *ClientWithResponses) UpdateArticleWithResponse(ctx context.Context, id int32, body UpdateArticleJSONRequestBody) (*UpdateArticleResponse, error) {
	rsp, err := c.UpdateArticle(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArticleResponse(rsp)
}

// GetCommentsByArticleIdWithResponse request returning *GetCommentsByArticleIdResponse
func (c *ClientWithResponses) GetCommentsByArticleIdWithResponse(ctx context.Context, params *GetCommentsByArticleIdParams) (*GetCommentsByArticleIdResponse, error) {
	rsp, err := c.GetCommentsByArticleId(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCommentsByArticleIdResponse(rsp)
}

// GetCommentByIdWithResponse request returning *GetCommentByIdResponse
func (c *ClientWithResponses) GetCommentByIdWithResponse(ctx context.Context, id string) (*GetCommentByIdResponse, error) {
	rsp, err := c.GetCommentById(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetCommentByIdResponse(rsp)
}

// GetFollowersWithResponse request returning *GetFollowersResponse
func (c *ClientWithResponses) GetFollowersWithResponse(ctx context.Context, params *GetFollowersParams) (*GetFollowersResponse, error) {
	rsp, err := c.GetFollowers(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetFollowersResponse(rsp)
}

// GetListingsWithResponse request returning *GetListingsResponse
func (c *ClientWithResponses) GetListingsWithResponse(ctx context.Context, params *GetListingsParams) (*GetListingsResponse, error) {
	rsp, err := c.GetListings(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetListingsResponse(rsp)
}

// CreateListingWithBodyWithResponse request with arbitrary body returning *CreateListingResponse
func (c *ClientWithResponses) CreateListingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateListingResponse, error) {
	rsp, err := c.CreateListingWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateListingResponse(rsp)
}

func (c *ClientWithResponses) CreateListingWithResponse(ctx context.Context, body CreateListingJSONRequestBody) (*CreateListingResponse, error) {
	rsp, err := c.CreateListing(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateListingResponse(rsp)
}

// GetListingsByCategoryWithResponse request returning *GetListingsByCategoryResponse
func (c *ClientWithResponses) GetListingsByCategoryWithResponse(ctx context.Context, category ListingCategory, params *GetListingsByCategoryParams) (*GetListingsByCategoryResponse, error) {
	rsp, err := c.GetListingsByCategory(ctx, category, params)
	if err != nil {
		return nil, err
	}
	return ParseGetListingsByCategoryResponse(rsp)
}

// GetListingByIdWithResponse request returning *GetListingByIdResponse
func (c *ClientWithResponses) GetListingByIdWithResponse(ctx context.Context, id int64) (*GetListingByIdResponse, error) {
	rsp, err := c.GetListingById(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetListingByIdResponse(rsp)
}

// UpdateListingWithBodyWithResponse request with arbitrary body returning *UpdateListingResponse
func (c *ClientWithResponses) UpdateListingWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader) (*UpdateListingResponse, error) {
	rsp, err := c.UpdateListingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingResponse(rsp)
}

func (c *ClientWithResponses) UpdateListingWithResponse(ctx context.Context, id int64, body UpdateListingJSONRequestBody) (*UpdateListingResponse, error) {
	rsp, err := c.UpdateListing(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListingResponse(rsp)
}

// GetPodcastEpisodesWithResponse request returning *GetPodcastEpisodesResponse
func (c *ClientWithResponses) GetPodcastEpisodesWithResponse(ctx context.Context, params *GetPodcastEpisodesParams) (*GetPodcastEpisodesResponse, error) {
	rsp, err := c.GetPodcastEpisodes(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPodcastEpisodesResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, params *GetTagsParams) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// GetUserMeWithResponse request returning *GetUserMeResponse
func (c *ClientWithResponses) GetUserMeWithResponse(ctx context.Context) (*GetUserMeResponse, error) {
	rsp, err := c.GetUserMe(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetUserMeResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, id string, params *GetUserParams) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetArticlesWithVideoWithResponse request returning *GetArticlesWithVideoResponse
func (c *ClientWithResponses) GetArticlesWithVideoWithResponse(ctx context.Context, params *GetArticlesWithVideoParams) (*GetArticlesWithVideoResponse, error) {
	rsp, err := c.GetArticlesWithVideo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetArticlesWithVideoResponse(rsp)
}

// GetWebhooksWithResponse request returning *GetWebhooksResponse
func (c *ClientWithResponses) GetWebhooksWithResponse(ctx context.Context) (*GetWebhooksResponse, error) {
	rsp, err := c.GetWebhooks(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhooksResponse(rsp)
}

// CreateWebhookWithBodyWithResponse request with arbitrary body returning *CreateWebhookResponse
func (c *ClientWithResponses) CreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateWebhookResponse, error) {
	rsp, err := c.CreateWebhookWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResponse(rsp)
}

func (c *ClientWithResponses) CreateWebhookWithResponse(ctx context.Context, body CreateWebhookJSONRequestBody) (*CreateWebhookResponse, error) {
	rsp, err := c.CreateWebhook(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResponse(rsp)
}

// DeleteWebhookWithResponse request returning *DeleteWebhookResponse
func (c *ClientWithResponses) DeleteWebhookWithResponse(ctx context.Context, id int64) (*DeleteWebhookResponse, error) {
	rsp, err := c.DeleteWebhook(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebhookResponse(rsp)
}

// GetWebhookByIdWithResponse request returning *GetWebhookByIdResponse
func (c *ClientWithResponses) GetWebhookByIdWithResponse(ctx context.Context, id int64) (*GetWebhookByIdResponse, error) {
	rsp, err := c.GetWebhookById(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookByIdResponse(rsp)
}

// ParseGetArticlesResponse parses an HTTP response from a GetArticlesWithResponse call
func ParseGetArticlesResponse(rsp *http.Response) (*GetArticlesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleIndex
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateArticleResponse parses an HTTP response from a CreateArticleWithResponse call
func ParseCreateArticleResponse(rsp *http.Response) (*CreateArticleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateArticleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ArticleShow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetUserArticlesResponse parses an HTTP response from a GetUserArticlesWithResponse call
func ParseGetUserArticlesResponse(rsp *http.Response) (*GetUserArticlesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleMe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUserAllArticlesResponse parses an HTTP response from a GetUserAllArticlesWithResponse call
func ParseGetUserAllArticlesResponse(rsp *http.Response) (*GetUserAllArticlesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserAllArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleMe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUserPublishedArticlesResponse parses an HTTP response from a GetUserPublishedArticlesWithResponse call
func ParseGetUserPublishedArticlesResponse(rsp *http.Response) (*GetUserPublishedArticlesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserPublishedArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleMe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUserUnpublishedArticlesResponse parses an HTTP response from a GetUserUnpublishedArticlesWithResponse call
func ParseGetUserUnpublishedArticlesResponse(rsp *http.Response) (*GetUserUnpublishedArticlesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserUnpublishedArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleMe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetArticleByIdResponse parses an HTTP response from a GetArticleByIdWithResponse call
func ParseGetArticleByIdResponse(rsp *http.Response) (*GetArticleByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetArticleByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArticleShow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateArticleResponse parses an HTTP response from a UpdateArticleWithResponse call
func ParseUpdateArticleResponse(rsp *http.Response) (*UpdateArticleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateArticleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArticleShow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetCommentsByArticleIdResponse parses an HTTP response from a GetCommentsByArticleIdWithResponse call
func ParseGetCommentsByArticleIdResponse(rsp *http.Response) (*GetCommentsByArticleIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCommentsByArticleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Comment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCommentByIdResponse parses an HTTP response from a GetCommentByIdWithResponse call
func ParseGetCommentByIdResponse(rsp *http.Response) (*GetCommentByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCommentByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Comment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetFollowersResponse parses an HTTP response from a GetFollowersWithResponse call
func ParseGetFollowersResponse(rsp *http.Response) (*GetFollowersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Follower
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetListingsResponse parses an HTTP response from a GetListingsWithResponse call
func ParseGetListingsResponse(rsp *http.Response) (*GetListingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetListingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Listing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateListingResponse parses an HTTP response from a CreateListingWithResponse call
func ParseCreateListingResponse(rsp *http.Response) (*CreateListingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateListingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Listing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetListingsByCategoryResponse parses an HTTP response from a GetListingsByCategoryWithResponse call
func ParseGetListingsByCategoryResponse(rsp *http.Response) (*GetListingsByCategoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetListingsByCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Listing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetListingByIdResponse parses an HTTP response from a GetListingByIdWithResponse call
func ParseGetListingByIdResponse(rsp *http.Response) (*GetListingByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetListingByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Listing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateListingResponse parses an HTTP response from a UpdateListingWithResponse call
func ParseUpdateListingResponse(rsp *http.Response) (*UpdateListingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateListingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArticleShow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPodcastEpisodesResponse parses an HTTP response from a GetPodcastEpisodesWithResponse call
func ParseGetPodcastEpisodesResponse(rsp *http.Response) (*GetPodcastEpisodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPodcastEpisodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PodcastEpisode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserMeResponse parses an HTTP response from a GetUserMeWithResponse call
func ParseGetUserMeResponse(rsp *http.Response) (*GetUserMeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetArticlesWithVideoResponse parses an HTTP response from a GetArticlesWithVideoWithResponse call
func ParseGetArticlesWithVideoResponse(rsp *http.Response) (*GetArticlesWithVideoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetArticlesWithVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleVideo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWebhooksResponse parses an HTTP response from a GetWebhooksWithResponse call
func ParseGetWebhooksResponse(rsp *http.Response) (*GetWebhooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WebhookIndex
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateWebhookResponse parses an HTTP response from a CreateWebhookWithResponse call
func ParseCreateWebhookResponse(rsp *http.Response) (*CreateWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebhookShow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteWebhookResponse parses an HTTP response from a DeleteWebhookWithResponse call
func ParseDeleteWebhookResponse(rsp *http.Response) (*DeleteWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWebhookByIdResponse parses an HTTP response from a GetWebhookByIdWithResponse call
func ParseGetWebhookByIdResponse(rsp *http.Response) (*GetWebhookByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookShow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
