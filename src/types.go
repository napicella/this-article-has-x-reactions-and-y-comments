// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"time"
)

// APIError defines model for APIError.
type APIError struct {
	Error  string `json:"error"`
	Status int32  `json:"status"`
}

// ArticleCreate defines model for ArticleCreate.
type ArticleCreate struct {
	Article *struct {

		// The body of the article.
		//
		// It can contain an optional front matter. For example
		//
		// ```markdown
		// ---
		// title: Hello, World!
		// published: true
		// tags: discuss, help
		// date: 20190701T10:00Z
		// series: Hello series
		// canonical_url: https://example.com/blog/hello
		// cover_image: article_published_cover_image
		// ---
		// ```
		//
		// `date`, `series` and `canonical_url` are optional.
		// `date` is the publication date-time
		// `series` is the name of the series the article belongs to
		// `canonical_url` is the canonical URL of the article
		// `cover_image` is the main image of the article
		//
		// *If the markdown contains a front matter, it will take precedence
		// on the equivalent params given in the payload.*
		BodyMarkdown *string `json:"body_markdown,omitempty"`
		CanonicalUrl *string `json:"canonical_url,omitempty"`
		Description  *string `json:"description,omitempty"`
		MainImage    *string `json:"main_image,omitempty"`

		// Only users belonging to an organization can assign the article to it
		OrganizationId *int32 `json:"organization_id,omitempty"`

		// True to create a published article, false otherwise. Defaults to false
		Published *bool `json:"published,omitempty"`

		// Article series name.
		//
		// All articles belonging to the same series need to have the same name
		// in this parameter.
		Series *string   `json:"series,omitempty"`
		Tags   *[]string `json:"tags,omitempty"`
		Title  string    `json:"title"`
	} `json:"article,omitempty"`
}

// ArticleFlareTag defines model for ArticleFlareTag.
type ArticleFlareTag struct {

	// Background color (hexadecimal)
	BgColorHex *string `json:"bg_color_hex,omitempty"`
	Name       *string `json:"name,omitempty"`

	// Text color (hexadecimal)
	TextColorHex *string `json:"text_color_hex,omitempty"`
}

// ArticleIndex defines model for ArticleIndex.
type ArticleIndex struct {
	CanonicalUrl  string    `json:"canonical_url"`
	CommentsCount int32     `json:"comments_count"`
	CoverImage    string    `json:"cover_image"`
	CreatedAt     time.Time `json:"created_at"`
	CrosspostedAt time.Time `json:"crossposted_at"`
	Description   string    `json:"description"`
	EditedAt      time.Time `json:"edited_at"`

	// Flare tag of the article
	FlareTag      *ArticleFlareTag `json:"flare_tag,omitempty"`
	Id            int32            `json:"id"`
	LastCommentAt time.Time        `json:"last_comment_at"`

	// The organization the resource belongs to
	Organization           *SharedOrganization `json:"organization,omitempty"`
	Path                   string              `json:"path"`
	PositiveReactionsCount int32               `json:"positive_reactions_count"`
	PublishedAt            time.Time           `json:"published_at"`

	// Crossposting or published date time
	PublishedTimestamp  time.Time `json:"published_timestamp"`
	ReadablePublishDate string    `json:"readable_publish_date"`
	Slug                string    `json:"slug"`
	SocialImage         string    `json:"social_image"`
	TagList             []string  `json:"tag_list"`
	Tags                string    `json:"tags"`
	Title               string    `json:"title"`
	TypeOf              string    `json:"type_of"`
	Url                 string    `json:"url"`

	// The resource creator
	User SharedUser `json:"user"`
}

// ArticleMe defines model for ArticleMe.
type ArticleMe struct {

	// The body of the article in Markdown format
	BodyMarkdown  string `json:"body_markdown"`
	CanonicalUrl  string `json:"canonical_url"`
	CommentsCount int32  `json:"comments_count"`
	CoverImage    string `json:"cover_image"`
	Description   string `json:"description"`

	// Flare tag of the article
	FlareTag *ArticleFlareTag `json:"flare_tag,omitempty"`
	Id       int32            `json:"id"`

	// The organization the resource belongs to
	Organization           *SharedOrganization `json:"organization,omitempty"`
	PageViewsCount         int32               `json:"page_views_count"`
	Path                   string              `json:"path"`
	PositiveReactionsCount int32               `json:"positive_reactions_count"`
	Published              bool                `json:"published"`
	PublishedAt            time.Time           `json:"published_at"`

	// Crossposting or published date time
	PublishedTimestamp time.Time `json:"published_timestamp"`
	Slug               string    `json:"slug"`
	TagList            []string  `json:"tag_list"`
	Title              string    `json:"title"`
	TypeOf             string    `json:"type_of"`
	Url                string    `json:"url"`

	// The resource creator
	User SharedUser `json:"user"`
}

// ArticleShow defines model for ArticleShow.
type ArticleShow struct {
	BodyHtml      string    `json:"body_html"`
	BodyMarkdown  string    `json:"body_markdown"`
	CanonicalUrl  string    `json:"canonical_url"`
	CommentsCount int32     `json:"comments_count"`
	CoverImage    string    `json:"cover_image"`
	CreatedAt     time.Time `json:"created_at"`
	CrosspostedAt time.Time `json:"crossposted_at"`
	Description   string    `json:"description"`
	EditedAt      time.Time `json:"edited_at"`

	// Flare tag of the article
	FlareTag      *ArticleFlareTag `json:"flare_tag,omitempty"`
	Id            int32            `json:"id"`
	LastCommentAt time.Time        `json:"last_comment_at"`

	// The organization the resource belongs to
	Organization           *SharedOrganization `json:"organization,omitempty"`
	Path                   string              `json:"path"`
	PositiveReactionsCount int32               `json:"positive_reactions_count"`
	PublishedAt            time.Time           `json:"published_at"`

	// Crossposting or published date time
	PublishedTimestamp  time.Time `json:"published_timestamp"`
	ReadablePublishDate string    `json:"readable_publish_date"`
	Slug                string    `json:"slug"`
	SocialImage         string    `json:"social_image"`
	TagList             string    `json:"tag_list"`
	Tags                []string  `json:"tags"`
	Title               string    `json:"title"`
	TypeOf              string    `json:"type_of"`
	Url                 string    `json:"url"`

	// The resource creator
	User SharedUser `json:"user"`
}

// ArticleUpdate defines model for ArticleUpdate.
type ArticleUpdate struct {
	Article struct {

		// The body of the article.
		//
		// It can contain an optional front matter. For example
		//
		// ```markdown
		// ---
		// title: Hello, World!
		// published: true
		// tags: discuss, help
		// date: 20190701T10:00Z
		// series: Hello series
		// canonical_url: https://example.com/blog/hello
		// cover_image: article_published_cover_image
		// ---
		// ```
		//
		// `date`, `series` and `canonical_url` are optional.
		// `date` is the publication date-time
		// `series` is the name of the series the article belongs to
		// `canonical_url` is the canonical URL of the article
		// `cover_image` is the main image of the article
		//
		// *If the markdown contains a front matter, it will take precedence
		// on the equivalent params given in the payload.*
		BodyMarkdown *string `json:"body_markdown,omitempty"`
		CanonicalUrl *string `json:"canonical_url,omitempty"`
		Description  *string `json:"description,omitempty"`
		MainImage    *string `json:"main_image,omitempty"`

		// Only users belonging to an organization can assign the article to it
		OrganizationId *int32 `json:"organization_id,omitempty"`

		// True to create a published article, false otherwise. Defaults to false
		Published *bool `json:"published,omitempty"`

		// Article series name.
		//
		// All articles belonging to the same series need to have the same name
		// in this parameter.
		//
		// To remove an article from a series, the `null` value can be used.
		Series *string   `json:"series,omitempty"`
		Tags   *[]string `json:"tags,omitempty"`
		Title  *string   `json:"title,omitempty"`
	} `json:"article,omitempty"`
}

// ArticleVideo defines model for ArticleVideo.
type ArticleVideo struct {

	// The preview image of the video
	CloudinaryVideoUrl string `json:"cloudinary_video_url"`
	Id                 int32  `json:"id"`
	Path               string `json:"path"`
	Title              string `json:"title"`
	TypeOf             string `json:"type_of"`
	User               struct {

		// The user's name
		Name *string `json:"name,omitempty"`
	} `json:"user"`
	UserId int32 `json:"user_id"`

	// The duration of the video.
	//
	// If the video duration is below 1 hour, the format will be `mm:ss`,
	// if it's 1 hour or above the format will be `h:mm:ss`.
	VideoDurationInMinutes string `json:"video_duration_in_minutes"`
}

// Comment defines model for Comment.
type Comment struct {

	// HTML formatted comment
	BodyHtml string    `json:"body_html"`
	Children []Comment `json:"children"`
	IdCode   string    `json:"id_code"`
	TypeOf   string    `json:"type_of"`

	// The resource creator
	User SharedUser `json:"user"`
}

// Follower defines model for Follower.
type Follower struct {

	// Follow id
	Id   int32  `json:"id"`
	Name string `json:"name"`
	Path string `json:"path"`

	// Profile image (60x60)
	ProfileImage string `json:"profile_image"`
	TypeOf       string `json:"type_of"`
	Username     string `json:"username"`
}

// Listing defines model for Listing.
type Listing struct {
	BodyMarkdown string          `json:"body_markdown"`
	Category     ListingCategory `json:"category"`
	Id           int64           `json:"id"`

	// The organization the resource belongs to
	Organization  *SharedOrganization `json:"organization,omitempty"`
	ProcessedHtml string              `json:"processed_html"`
	Published     bool                `json:"published"`
	Slug          string              `json:"slug"`
	TagList       string              `json:"tag_list"`
	Tags          []string            `json:"tags"`
	Title         string              `json:"title"`
	TypeOf        string              `json:"type_of"`

	// The resource creator
	User SharedUser `json:"user"`
}

// ListingCategory defines model for ListingCategory.
type ListingCategory string

// ListingCreate defines model for ListingCreate.
type ListingCreate struct {
	ClassifiedListing *struct {

		// Set it to "draft" to create an unpublished listing
		Action *string `json:"action,omitempty"`

		// The body of the listing in Markdown format.
		BodyMarkdown string          `json:"body_markdown"`
		Category     ListingCategory `json:"category"`

		// True if users are allowed to contact the listing's owner
		// via DEV connect, false otherwise.
		//
		// Defaults to false.
		ContactViaConnect *bool `json:"contact_via_connect,omitempty"`

		// Date and time of expiration.
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// Geographical area or city for the listing.
		Location *string `json:"location,omitempty"`

		// The id of the organization the user is creating the listing for.
		//
		// Only users belonging to an organization can assign the listing to it.
		OrganizationId *int64 `json:"organization_id,omitempty"`

		// Comma separated list of tags.
		//
		// A maximum of 8 tags are allowed.
		TagList *string `json:"tag_list,omitempty"`

		// Tags related to the listing.
		//
		// A maximum of 8 tags are allowed and it takes precedence over `tag_list`.
		Tags  *[]string `json:"tags,omitempty"`
		Title string    `json:"title"`
	} `json:"classified_listing,omitempty"`
}

// ListingUpdate defines model for ListingUpdate.
type ListingUpdate struct {
	ClassifiedListing *struct {

		// This param can be provided by itself to invoke some actions:
		//
		// - `bump` bumps the listing and charge either the
		//   organization or the user
		// - `publish` publishes a draft listing
		// - `unpublish` unpublishes a published listing
		//
		// It will take priority on any other param in the payload.
		Action *string `json:"action,omitempty"`

		// The body of the listing in Markdown format.
		BodyMarkdown *string          `json:"body_markdown,omitempty"`
		Category     *ListingCategory `json:"category,omitempty"`

		// True if users are allowed to contact the listing's owner
		// via DEV connect, false otherwise.
		//
		// Defaults to false.
		ContactViaConnect *bool `json:"contact_via_connect,omitempty"`

		// Date and time of expiration.
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// Geographical area or city for the listing.
		Location *string `json:"location,omitempty"`

		// Comma separated list of tags.
		//
		// A maximum of 8 tags are allowed.
		TagList *string `json:"tag_list,omitempty"`

		// Tags related to the listing.
		//
		// A maximum of 8 tags are allowed and it takes precedence over `tag_list`.
		Tags  *[]string `json:"tags,omitempty"`
		Title *string   `json:"title,omitempty"`
	} `json:"classified_listing,omitempty"`
}

// PodcastEpisode defines model for PodcastEpisode.
type PodcastEpisode struct {
	Id       int32  `json:"id"`
	ImageUrl string `json:"image_url"`
	Path     string `json:"path"`
	Podcast  struct {
		ImageUrl *string `json:"image_url,omitempty"`
		Slug     *string `json:"slug,omitempty"`
		Title    *string `json:"title,omitempty"`
	} `json:"podcast"`
	Title  string `json:"title"`
	TypeOf string `json:"type_of"`
}

// SharedOrganization defines model for SharedOrganization.
type SharedOrganization struct {
	Name *string `json:"name,omitempty"`

	// Profile image (640x640)
	ProfileImage *string `json:"profile_image,omitempty"`

	// Profile image (90x90)
	ProfileImage90 *string `json:"profile_image_90,omitempty"`
	Slug           *string `json:"slug,omitempty"`
	Username       *string `json:"username,omitempty"`
}

// SharedUser defines model for SharedUser.
type SharedUser struct {
	GithubUsername *string `json:"github_username,omitempty"`
	Name           *string `json:"name,omitempty"`

	// Profile image (640x640)
	ProfileImage *string `json:"profile_image,omitempty"`

	// Profile image (90x90)
	ProfileImage90  *string `json:"profile_image_90,omitempty"`
	TwitterUsername *string `json:"twitter_username,omitempty"`
	Username        *string `json:"username,omitempty"`
	WebsiteUrl      *string `json:"website_url,omitempty"`
}

// Tag defines model for Tag.
type Tag struct {

	// Background color (hexadecimal)
	BgColorHex string `json:"bg_color_hex"`
	Id         int32  `json:"id"`
	Name       string `json:"name"`

	// Text color (hexadecimal)
	TextColorHex string `json:"text_color_hex"`
}

// User defines model for User.
type User struct {
	GithubUsername string `json:"github_username"`
	Id             int32  `json:"id"`

	// Date of joining (formatted with strftime `"%b %e, %Y"`)
	JoinedAt string `json:"joined_at"`
	Location string `json:"location"`
	Name     string `json:"name"`

	// Profile image (320x320)
	ProfileImage    string `json:"profile_image"`
	Summary         string `json:"summary"`
	TwitterUsername string `json:"twitter_username"`
	TypeOf          string `json:"type_of"`
	Username        string `json:"username"`
	WebsiteUrl      string `json:"website_url"`
}

// WebhookCreate defines model for WebhookCreate.
type WebhookCreate struct {
	WebhookEndpoint *struct {

		// An array of events identifiers
		Events []string `json:"events"`

		// The name of the requester, eg. "DEV"
		Source    string `json:"source"`
		TargetUrl string `json:"target_url"`
	} `json:"webhook_endpoint,omitempty"`
}

// WebhookIndex defines model for WebhookIndex.
type WebhookIndex struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// An array of events identifiers
	Events *[]string `json:"events,omitempty"`
	Id     *int64    `json:"id,omitempty"`

	// The name of the requester, eg. "DEV"
	Source    *string `json:"source,omitempty"`
	TargetUrl *string `json:"target_url,omitempty"`
	TypeOf    *string `json:"type_of,omitempty"`
}

// WebhookShow defines model for WebhookShow.
type WebhookShow struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// An array of events identifiers
	Events *[]string `json:"events,omitempty"`
	Id     *int64    `json:"id,omitempty"`

	// The name of the requester, eg. "DEV"
	Source    *string `json:"source,omitempty"`
	TargetUrl *string `json:"target_url,omitempty"`
	TypeOf    *string `json:"type_of,omitempty"`

	// The resource creator
	User *SharedUser `json:"user,omitempty"`
}

// PageParam defines model for pageParam.
type PageParam int32

// PerPageParam10to1000 defines model for perPageParam10to1000.
type PerPageParam10to1000 int32

// PerPageParam24to1000 defines model for perPageParam24to1000.
type PerPageParam24to1000 int32

// PerPageParam30to1000 defines model for perPageParam30to1000.
type PerPageParam30to1000 int32

// PerPageParam80to1000 defines model for perPageParam80to1000.
type PerPageParam80to1000 int32

// GetArticlesParams defines parameters for GetArticles.
type GetArticlesParams struct {

	// Pagination page.
	Page *PageParam `json:"page,omitempty"`

	// Page size (the number of items to return per page).
	PerPage *PerPageParam30to1000 `json:"per_page,omitempty"`

	// Using this parameter will retrieve articles that contain the
	// requested tag.
	//
	// Articles will be ordered by descending popularity.
	//
	// This parameter can be used in conjuction with `top`.
	Tag *string `json:"tag,omitempty"`

	// Using this parameter will retrieve articles belonging
	// to a User or Organization ordered by descending publication date.
	//
	// If `state=all` the number of items returned will be `1000` instead of the default `30`.
	//
	// This parameter can be used in conjuction with `state`.
	Username *string `json:"username,omitempty"`

	// Using this parameter will allow the client to check which articles are fresh or rising.
	//
	// If `state=fresh` the server will return fresh articles.
	// If `state=rising` the server will return rising articles.
	//
	// This param can be used in conjuction with `username`, only if set to `all`.
	State *string `json:"state,omitempty"`

	// Using this parameter will allow the client to return the most popular articles
	// in the last `N` days.
	//
	// `top` indicates the number of days since publication of the articles
	// returned.
	//
	// This param can be used in conjuction with `tag`.
	Top *int32 `json:"top,omitempty"`

	// Adding this will allow the client to return the list of articles
	// belonging to the requested collection, ordered by ascending
	// publication date.
	CollectionId *int32 `json:"collection_id,omitempty"`
}

// CreateArticleJSONBody defines parameters for CreateArticle.
type CreateArticleJSONBody ArticleCreate

// GetUserArticlesParams defines parameters for GetUserArticles.
type GetUserArticlesParams struct {

	// Pagination page.
	Page *PageParam `json:"page,omitempty"`

	// Page size (the number of items to return per page).
	PerPage *PerPageParam30to1000 `json:"per_page,omitempty"`
}

// GetUserAllArticlesParams defines parameters for GetUserAllArticles.
type GetUserAllArticlesParams struct {

	// Pagination page.
	Page *PageParam `json:"page,omitempty"`

	// Page size (the number of items to return per page).
	PerPage *PerPageParam30to1000 `json:"per_page,omitempty"`
}

// GetUserPublishedArticlesParams defines parameters for GetUserPublishedArticles.
type GetUserPublishedArticlesParams struct {

	// Pagination page.
	Page *PageParam `json:"page,omitempty"`

	// Page size (the number of items to return per page).
	PerPage *PerPageParam30to1000 `json:"per_page,omitempty"`
}

// GetUserUnpublishedArticlesParams defines parameters for GetUserUnpublishedArticles.
type GetUserUnpublishedArticlesParams struct {

	// Pagination page.
	Page *PageParam `json:"page,omitempty"`

	// Page size (the number of items to return per page).
	PerPage *PerPageParam30to1000 `json:"per_page,omitempty"`
}

// UpdateArticleJSONBody defines parameters for UpdateArticle.
type UpdateArticleJSONBody ArticleUpdate

// GetCommentsByArticleIdParams defines parameters for GetCommentsByArticleId.
type GetCommentsByArticleIdParams struct {

	// Article identifier.
	AId *int32 `json:"a_id,omitempty"`
}

// GetFollowersParams defines parameters for GetFollowers.
type GetFollowersParams struct {

	// Pagination page.
	Page *PageParam `json:"page,omitempty"`

	// Page size (the number of items to return per page).
	PerPage *PerPageParam80to1000 `json:"per_page,omitempty"`
}

// GetListingsParams defines parameters for GetListings.
type GetListingsParams struct {

	// Pagination page.
	Page *PageParam `json:"page,omitempty"`

	// Page size (the number of items to return per page).
	PerPage *PerPageParam30to1000 `json:"per_page,omitempty"`

	// Using this parameter will return listings belonging to the
	// requested category.
	Category *string `json:"category,omitempty"`
}

// CreateListingJSONBody defines parameters for CreateListing.
type CreateListingJSONBody ListingCreate

// GetListingsByCategoryParams defines parameters for GetListingsByCategory.
type GetListingsByCategoryParams struct {

	// Pagination page.
	Page *PageParam `json:"page,omitempty"`

	// Page size (the number of items to return per page).
	PerPage *PerPageParam30to1000 `json:"per_page,omitempty"`
}

// UpdateListingJSONBody defines parameters for UpdateListing.
type UpdateListingJSONBody ListingUpdate

// GetPodcastEpisodesParams defines parameters for GetPodcastEpisodes.
type GetPodcastEpisodesParams struct {

	// Pagination page.
	Page *PageParam `json:"page,omitempty"`

	// Page size (the number of items to return per page).
	PerPage *PerPageParam30to1000 `json:"per_page,omitempty"`

	// Using this parameter will retrieve episodes belonging
	// to a specific podcast.
	Username *string `json:"username,omitempty"`
}

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {

	// Pagination page.
	Page *PageParam `json:"page,omitempty"`

	// Page size (the number of items to return per page).
	PerPage *PerPageParam10to1000 `json:"per_page,omitempty"`
}

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {

	// Username of the user
	Url *string `json:"url,omitempty"`
}

// GetArticlesWithVideoParams defines parameters for GetArticlesWithVideo.
type GetArticlesWithVideoParams struct {

	// Pagination page.
	Page *PageParam `json:"page,omitempty"`

	// Page size (the number of items to return per page).
	PerPage *PerPageParam24to1000 `json:"per_page,omitempty"`
}

// CreateWebhookJSONBody defines parameters for CreateWebhook.
type CreateWebhookJSONBody WebhookCreate

// CreateArticleRequestBody defines body for CreateArticle for application/json ContentType.
type CreateArticleJSONRequestBody CreateArticleJSONBody

// UpdateArticleRequestBody defines body for UpdateArticle for application/json ContentType.
type UpdateArticleJSONRequestBody UpdateArticleJSONBody

// CreateListingRequestBody defines body for CreateListing for application/json ContentType.
type CreateListingJSONRequestBody CreateListingJSONBody

// UpdateListingRequestBody defines body for UpdateListing for application/json ContentType.
type UpdateListingJSONRequestBody UpdateListingJSONBody

// CreateWebhookRequestBody defines body for CreateWebhook for application/json ContentType.
type CreateWebhookJSONRequestBody CreateWebhookJSONBody
